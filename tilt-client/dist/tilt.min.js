/*! Tilt.js 0.0.0 - built 12-05-2014 */
!function(a){var b=function(b,c){return void 0===c?new a.Tilt.Sock(b):new a.Tilt.Sock(b,c)};a.Tilt=a.Tilt||{},a.Tilt.connect=b}(this),function(a){var b=function(a,b){this.socket=io.connect(a);var c=this;void 0===b?(this.isGame=!0,this.roomID=!1,this.controllers=[],this.socket.on("notifyController",function(a){c.createController(a)}),this.socket.on("notifyControllerDisconnect",function(a){c.deleteController(a)}),this.socket.on("notifyRoomID",function(a){c.roomID=a}),this.socket.emit("join","computer")):(this.socket.emit("join","controller",b),this.isGame=!1,this.roomID=b),this.socket.on("notifySuccess",function(){console.log("success!")}),this.callbacks={},this.socket.on("msg",function(){c.receiveMsg(arguments)})};b.prototype={on:function(a,b){return this.callbacks[a]=this.callbacks[a]||[],this.callbacks[a].push(b),this},off:function(a,b){return this.callbacks[a]=this.callbacks[a]||[],this.callbacks[a]=this.callbacks[a].filter(function(a){return a===b}),this},emit:function(){var a=Array.prototype.slice.call(arguments);return a.unshift("msg"),this.socket.emit.apply(this.socket,a),this},receiveMsg:function(a){var b=Array.prototype.slice.call(a),c=a.shift();if(void 0!==this.callbacks[c])for(var d in this.callbacks[c])this.callbacks[c][d].apply(this,b)},createController:function(a){return this.isGame===!1?(console.log("Warning: createController was called, but this is a controller."),!1):void(-1===this.controllers.indexOf(a)&&this.controllers.push(a))},deleteController:function(a){return this.isGame===!1?(console.log("Warning: createController was called, but this is a controller."),!1):void(this.controllers=this.controllers.filter(function(b){return b===a}))}},a.Tilt=a.Tilt||{},a.Tilt.Sock=b}(this);